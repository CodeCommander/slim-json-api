{"name":"Slim-json-api","tagline":"Slim extension to implement fast JSON API's","body":"#slim-jsonAPI\r\nThis is an extension to the [SLIM framework](https://github.com/codeguy/Slim) to implement json API's with great ease.\r\n\r\n##instalation\r\nUsing composer you can add use this as your composer.json\r\n\r\n```json\r\n    {\r\n        \"require\": {\r\n            \"slim/slim\": \"2.3.*\",\r\n            \"entomb/slim-json-api\": \"dev-master\"\r\n        }\r\n    }\r\n\r\n```\r\n\r\n##Usage\r\nTo include the middleware and view you just have to load them using the default _Slim_ way.\r\nRead more about Slim Here (https://github.com/codeguy/Slim#getting-started)\r\n\r\n```php\r\n    require 'vendor/autoload.php';\r\n\r\n    $app = new \\Slim\\Slim();\r\n\r\n    $app->view(new \\JsonApiView());\r\n    $app->add(new \\JsonApiMiddleware());\r\n```\r\n\r\n###.htaccess sample\r\nHere's an .htaccess sample for simple RESTfull API's\r\n```\r\nRewriteEngine On\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteRule ^ index.php [QSA,L]\r\n```\r\n\r\n###example method\r\nall your requests will be returning a JSON output.\r\nthe usage will be `$app->render( (int)$HTTP_CODE, (array)$DATA);`\r\n\r\n####example Code \r\n```php\r\n\r\n    $app->get('/', function() use ($app) {\r\n        $app->render(200,array(\r\n                'msg' => 'welcome to my API!',\r\n            ));\r\n    });\r\n\r\n```\r\n\r\n\r\n####example output\r\n```json\r\n{\r\n    \"msg\":\"welcome to my API!\",\r\n    \"error\":false,\r\n    \"status\":200\r\n}\r\n\r\n```\r\n\r\n##Errors\r\nTo display an error just set the `error=>true` in your data array.\r\nAll requests will have an `error` param that defaults to false.\r\n\r\n```php\r\n\r\n    $app->get('/user/:id', function($id) use ($app) {\r\n\r\n        //your code here\r\n\r\n        $app->render(404,array(\r\n                'error' => TRUE,\r\n                'msg'   => 'user not found',\r\n            ));\r\n    });\r\n\r\n```\r\n```json\r\n{\r\n    \"msg\":\"user not found\",\r\n    \"error\":true,\r\n    \"status\":404\r\n}\r\n\r\n```\r\n\r\nYou can optionaly throw exeptions, the middleware will catch all exeptions and display error mensages.\r\n\r\n```php\r\n\r\n    $app->get('/user/:id', function($id) use ($app) {\r\n\r\n        //your code here\r\n\r\n        if(...){\r\n            throw new Exception(\"Something wrong with your request!\");\r\n        }\r\n    });\r\n\r\n```\r\n```json\r\n{\r\n    \"error\": true,\r\n    \"msg\": \"ERROR: Something wrong with your request!\",\r\n    \"status\": 500\r\n}\r\n\r\n```\r\n\r\n\r\n##routing specific requests to the API\r\nIf your site is using regular HTML responses and you just want to expose an API point on a specific route,\r\nyou can use Slim router middlewares to define this.\r\n\r\n```php\r\n    function APIrequest(){\r\n        $app = \\Slim\\Slim::getInstance();\r\n        $app->view(new \\JsonApiView());\r\n        $app->add(new \\JsonApiMiddleware());\r\n    }\r\n\r\n\r\n    $app->get('/home',function() use($app){\r\n        //regular html response\r\n        $app->render(\"template.tpl\");\r\n    });\r\n\r\n    $app->get('/api','APIrequest',function() use($app){\r\n        //this request will have full json responses\r\n\r\n        $app->render(200,array(\r\n                'msg' => 'welcome to my API!',\r\n            ));\r\n    });\r\n```\r\n\r\n\r\n##middleware\r\nThe middleware will set some static routes for default requests.\r\n**if you dont want to use it**, you can copy its content code into your bootstrap file.\r\n\r\n***IMPORTANT: remember to use `$app->config('debug', false);` or errors will still be printed in HTML***\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}